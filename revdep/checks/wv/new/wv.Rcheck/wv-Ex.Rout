
R version 4.1.2 (2021-11-01) -- "Bird Hippie"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "wv"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('wv')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("ACF")
> ### * ACF
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ACF
> ### Title: Auto-Covariance and Correlation Functions
> ### Aliases: ACF
> 
> ### ** Examples
> 
> # Get Autocorrelation
> m = ACF(datasets::AirPassengers)
> 
> # Get Autocovariance and do not remove trend from signal
> m = ACF(datasets::AirPassengers, cor = FALSE, demean = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("av_ar1")
> ### * av_ar1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: av_ar1
> ### Title: Calculate Theoretical Allan Variance for Stationary First-Order
> ###   Autoregressive (AR1) Process
> ### Aliases: av_ar1
> 
> ### ** Examples
> 
> av1 = av_ar1(n = 5, phi = 0.9, sigma2 = 1)
> av2 = av_ar1(n = 8, phi = 0.5, sigma2 = 2)
> 
> 
> 
> cleanEx()
> nameEx("av_wn")
> ### * av_wn
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: av_wn
> ### Title: Calculate Theoretical Allan Variance for Stationary White Noise
> ###   Process
> ### Aliases: av_wn
> 
> ### ** Examples
> 
> av1 = av_wn(sigma2 = 1, n = 5)
> av2 = av_wn(sigma2 = 2, n = 8)
> 
> 
> 
> cleanEx()
> nameEx("compare_wvar")
> ### * compare_wvar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compare_wvar
> ### Title: Comparison Between Multiple Wavelet Variances
> ### Aliases: compare_wvar
> 
> ### ** Examples
> 
> set.seed(999)
> n = 10^4
> Xt = arima.sim(n = n, list(ar = 0.10))
> Yt = arima.sim(n = n, list(ar = 0.35))
> Zt = arima.sim(n = n, list(ar = 0.70))
> Wt = arima.sim(n = n, list(ar = 0.95))
> 
> wv_Xt = wvar(Xt)
> wv_Yt = wvar(Yt)
> wv_Zt = wvar(Zt)
> wv_Wt = wvar(Wt)
> 
> compare_wvar(wv_Xt, wv_Yt, wv_Zt, wv_Wt)
> 
> 
> 
> cleanEx()
> nameEx("dwt")
> ### * dwt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dwt
> ### Title: Discrete Wavelet Transform
> ### Aliases: dwt
> 
> ### ** Examples
> 
> set.seed(999)
> x = rnorm(2^8)
> ret = dwt(x)
> 
> summary(ret)

Results of DWT using haar filter with 7 levels:
Displaying only the first 6 coefficients...
Level 1 Wavelet Coefficients
 -0.7288994 -0.3713113 -0.204154 0.4326554 -0.108371 -0.8425081 ...
Level 2 Wavelet Coefficients
 1.329777 -1.15106 1.7741 -0.7581617 -0.6710026 0.2598958 ...
Level 3 Wavelet Coefficients
 -1.223201 0.4721952 0.1247242 1.335635 0.1302106 0.4989655 ...
Level 4 Wavelet Coefficients
 1.14869 0.1209628 -0.6243381 -0.1415789 0.6930248 1.155734 ...
Level 5 Wavelet Coefficients
 0.2853548 1.73621 0.7449743 0.4771237 1.236138 -0.2320687 ...
Level 6 Wavelet Coefficients
 0.5952832 -1.373433 -1.327617 0.08159036 ...
Level 7 Wavelet Coefficients
 -0.1167127 -1.287948 ...
> 
> plot(ret)
> 
> 
> 
> cleanEx()
> nameEx("modwt")
> ### * modwt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: modwt
> ### Title: Maximum Overlap Discrete Wavelet Transform
> ### Aliases: modwt
> 
> ### ** Examples
> 
> set.seed(999)
> x = rnorm(100)
> ret = modwt(x)
> 
> summary(ret)

Results of MODWT using haar filter with 6 levels:
Displaying only the first 6 coefficients...
Level 1 Wavelet Coefficients
 -0.5154097 1.053872 -0.2625567 -0.2736885 -0.1443587 -0.6563173 ...
Level 2 Wavelet Coefficients
 0.6648886 0.1275349 -0.4771462 -0.6093615 -0.5755298 0.05253529 ...
Level 3 Wavelet Coefficients
 -0.4324668 -0.5193264 -0.6820166 0.05272893 0.4199327 0.7445505 ...
Level 4 Wavelet Coefficients
 0.2871724 0.3948033 0.4591856 0.3995357 0.2700206 0.05856007 ...
Level 5 Wavelet Coefficients
 0.05044408 0.04297379 0.02943181 -0.009765617 0.06226712 0.1188075 ...
Level 6 Wavelet Coefficients
 0.0744104 0.06411294 -0.008083629 -0.009948806 0.05591394 0.05663235 ...
> 
> plot(ret)
> 
> 
> 
> cleanEx()
> nameEx("plot.auto_corr")
> ### * plot.auto_corr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.auto_corr
> ### Title: Auto-Covariance and Correlation Functions
> ### Aliases: plot.auto_corr
> ### Keywords: internal
> 
> ### ** Examples
> 
> # Calculate the Autocorrelation
> m = ACF(datasets::AirPassengers)
> 
> # Plot with 95% CI
> plot(m) 
> 
> # Plot with 90% CI
> plot(m, ci = 0.90) 
> 
> # Plot without 95% CI
> plot(m, show.ci = FALSE)
> 
> 
> 
> cleanEx()
> nameEx("plot.dwt")
> ### * plot.dwt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.dwt
> ### Title: Plot Discrete Wavelet Transform
> ### Aliases: plot.dwt
> ### Keywords: internal
> 
> ### ** Examples
> 
> # Simulate a Gaussian white noise
> n = 10^3
> Xt = rnorm(n)
> 
> # dwt
> Yt = dwt(Xt)
Warning in dwt(Xt) :
  The data has been truncated so that it is divisible by `nlevels` (e.g. 2^*)
> 
> # Graph examples
> plot(Yt)
> plot(Yt, index = c(1,4,5,6,8,2))
> plot(Yt, index = c(1,4,5,6), couleur = "blue")
> plot(Yt, index = c(1,4,5,6), couleur = rep(c("blue","yellow"),2))
> 
> 
> 
> cleanEx()
> nameEx("plot.imu_wvar")
> ### * plot.imu_wvar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.imu_wvar
> ### Title: Plot Wavelet Variance based on IMU Data
> ### Aliases: plot.imu_wvar
> ### Keywords: internal
> 
> ### ** Examples
> 
> data("kvh1750_wv")
> plot(kvh1750_wv)
> 
> 
> 
> cleanEx()
> nameEx("plot.modwt")
> ### * plot.modwt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.modwt
> ### Title: Plot Maximum Overlap Discrete Wavelet Transform
> ### Aliases: plot.modwt
> ### Keywords: internal
> 
> ### ** Examples
> 
> # Simulate a Gaussian white noise
> n = 10^3
> Xt = rnorm(n)
> 
> # MODWT
> Yt = modwt(Xt)
> 
> # Graph examples
> plot(Yt)
> plot(Yt, index = c(1,4,5,6,8,2))
> plot(Yt, index = c(1,4,5,6), couleur = "blue")
> plot(Yt, index = c(1,4,5,6), couleur = rep(c("blue","yellow"),2))
> 
> 
> 
> cleanEx()
> nameEx("plot.wccv_pair")
> ### * plot.wccv_pair
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.wccv_pair
> ### Title: Plot Cross Covariance Pair
> ### Aliases: plot.wccv_pair
> ### Keywords: internal
> 
> ### ** Examples
> 
> n = 10^5
> Xt = cumsum(rnorm(n, 0, 0.01))
> Wt = Xt + rnorm(n)
> Yt = Xt + rnorm(n)
> wcov = wccv_pair(Wt, Yt)
> plot(wcov)
> 
> 
> 
> cleanEx()
> nameEx("plot.wvar")
> ### * plot.wvar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.wvar
> ### Title: Plot Wavelet Variance
> ### Aliases: plot.wvar
> ### Keywords: internal
> 
> ### ** Examples
> 
> set.seed(999)
> n = 10^4
> Xt = rnorm(n)
> wv = wvar(Xt)
> plot(wv)
> plot(wv, main = "Simulated white noise", xlab = "Scales")
> plot(wv, units = "sec", legend_position = "topright")
> plot(wv, col_wv = "darkred", col_ci = "pink")
> 
> 
> 
> cleanEx()
> nameEx("print.dwt")
> ### * print.dwt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.dwt
> ### Title: Print Discrete Wavelet Transform
> ### Aliases: print.dwt
> ### Keywords: internal
> 
> ### ** Examples
> 
> set.seed(999)
> x = rnorm(2^8)
> print(dwt(x))
[[1]]
              [,1]
  [1,] -0.72889944
  [2,] -0.37131131
  [3,] -0.20415397
  [4,]  0.43265539
  [5,] -0.10837096
  [6,] -0.84250806
  [7,] -0.54179324
  [8,] -1.64072581
  [9,]  0.02285547
 [10,] -2.10413896
 [11,]  1.32342644
 [12,]  0.46230535
 [13,]  1.24983538
 [14,]  0.15690501
 [15,]  1.00933564
 [16,] -1.25963157
 [17,]  0.63722357
 [18,] -1.32011525
 [19,]  0.63172585
 [20,] -1.35786876
 [21,]  0.34940611
 [22,]  0.12058606
 [23,] -0.01710248
 [24,]  1.46022349
 [25,] -0.43627984
 [26,] -0.37357720
 [27,] -0.97461739
 [28,]  0.24707894
 [29,] -1.30596334
 [30,] -0.70772182
 [31,]  1.47662660
 [32,]  0.04367069
 [33,] -0.79788706
 [34,]  0.79609673
 [35,]  1.00015554
 [36,]  0.02608066
 [37,] -0.96607326
 [38,] -0.64467560
 [39,] -1.84077241
 [40,] -0.42190116
 [41,]  1.15132631
 [42,]  0.92899547
 [43,]  0.58495131
 [44,] -1.14306027
 [45,] -0.40258476
 [46,] -1.15318737
 [47,]  1.59979283
 [48,]  1.53894673
 [49,]  0.20091584
 [50,]  0.32648835
 [51,]  1.50554057
 [52,]  0.08906212
 [53,] -2.97184942
 [54,]  0.77322954
 [55,]  0.58884720
 [56,] -0.86348183
 [57,]  0.05370806
 [58,] -0.60378636
 [59,]  0.12936434
 [60,]  1.22773122
 [61,]  0.41219599
 [62,]  0.25353792
 [63,] -0.74015323
 [64,] -0.05055111
 [65,] -0.59724831
 [66,]  0.19752204
 [67,] -0.53275161
 [68,]  0.97034397
 [69,]  0.30587516
 [70,]  1.40220957
 [71,]  1.03885172
 [72,]  0.68989586
 [73,] -0.77966154
 [74,] -0.70217212
 [75,]  1.29530962
 [76,]  0.29324058
 [77,]  0.46405241
 [78,] -0.70261399
 [79,]  1.16568499
 [80,] -1.40977757
 [81,] -0.02221320
 [82,]  0.33090141
 [83,]  1.56189296
 [84,] -0.39505945
 [85,]  0.37902072
 [86,]  0.22168756
 [87,] -0.01428200
 [88,] -0.12941656
 [89,]  1.24191202
 [90,]  0.98175311
 [91,]  0.81958759
 [92,] -0.09460804
 [93,]  0.64496580
 [94,]  1.24957148
 [95,] -0.47381096
 [96,]  0.91306617
 [97,]  0.01955213
 [98,]  1.00028046
 [99,] -0.97536651
[100,]  0.62647711
[101,]  2.12375673
[102,]  0.04716831
[103,] -0.10992377
[104,] -0.57689365
[105,] -0.78839816
[106,] -1.26565972
[107,] -1.53256423
[108,]  1.80448854
[109,]  1.03217243
[110,]  0.79707617
[111,] -1.32040992
[112,]  0.29826872
[113,] -2.30716377
[114,] -0.02696702
[115,]  1.54559061
[116,] -0.55180823
[117,] -0.15991405
[118,]  1.60263284
[119,]  0.91433732
[120,] -0.28951691
[121,]  1.05502193
[122,]  0.35909443
[123,] -1.33492429
[124,]  0.44657129
[125,] -1.26006188
[126,]  0.12279219
[127,]  0.01696589
[128,] -1.41544144

[[2]]
              [,1]
 [1,]  1.329777133
 [2,] -1.151059620
 [3,]  1.774100074
 [4,] -0.758161673
 [5,] -0.671002566
 [6,]  0.259895828
 [7,] -0.754287567
 [8,]  2.332357194
 [9,] -1.810220923
[10,] -0.518522830
[11,] -0.958276770
[12,] -1.306915851
[13,] -0.654593163
[14,] -0.947351767
[15,]  0.290694274
[16,]  0.952127199
[17,] -0.262487809
[18,] -0.377290716
[19,]  0.251561771
[20,]  0.901303082
[21,] -0.742862242
[22,]  1.345853709
[23,]  0.121292257
[24,] -0.194046724
[25,]  0.424948947
[26,] -0.155928709
[27,]  1.330980127
[28,]  0.185130911
[29,]  0.229767111
[30,] -1.447028196
[31,] -1.768213573
[32,] -0.472644422
[33,] -0.952613918
[34,] -0.008200899
[35,]  1.185648182
[36,] -0.280000455
[37,]  0.628506609
[38,]  1.109623080
[39,] -0.033366196
[40,] -0.238271629
[41,] -0.776304340
[42,]  1.223215769
[43,] -0.064054575
[44,] -0.282642489
[45,] -0.046992006
[46,]  0.863502072
[47,] -0.931591643
[48,]  0.100813049
[49,] -0.048956362
[50,] -0.076354067
[51,]  0.415991446
[52,] -1.120612832
[53,]  0.841364712
[54,]  0.137473454
[55,]  0.309167512
[56,] -0.449980244
[57,]  2.048934543
[58,]  0.352962595
[59,] -0.941067161
[60,] -1.240718912
[61,]  1.825099334
[62,]  0.689982576
[63,]  2.021738123
[64,]  0.786487223

[[3]]
             [,1]
 [1,] -1.22320077
 [2,]  0.47219519
 [3,]  0.12472418
 [4,]  1.33563524
 [5,]  0.13021065
 [6,]  0.49896549
 [7,]  0.89817225
 [8,]  1.14169199
 [9,]  1.15231763
[10,] -0.99689907
[11,]  0.11695443
[12,] -1.02811101
[13,] -0.62360149
[14,] -1.65820072
[15,]  1.51601253
[16,]  2.15880930
[17,] -0.35541255
[18,]  1.48724762
[19,]  0.52009513
[20,]  0.17094179
[21,]  1.24491909
[22,]  0.69896585
[23,]  1.12782250
[24,]  0.92224957
[25,] -0.20525884
[26,]  0.07672062
[27,] -1.38794899
[28,] -0.17499612
[29,] -0.26543147
[30,] -1.72630404
[31,] -1.13314393
[32,] -0.98655836

[[4]]
             [,1]
 [1,]  1.14868967
 [2,]  0.12096280
 [3,] -0.62433814
 [4,] -0.14157892
 [5,]  0.69302480
 [6,]  1.15573426
 [7,]  0.05803346
 [8,] -0.15074020
 [9,] -0.05134474
[10,]  0.02464744
[11,] -0.55696359
[12,] -0.16475040
[13,]  1.04468161
[14,] -0.24607875
[15,] -1.74839343
[16,] -3.40037107

[[5]]
           [,1]
[1,]  0.2853548
[2,]  1.7362096
[3,]  0.7449743
[4,]  0.4771237
[5,]  1.2361382
[6,] -0.2320687
[7,] -0.8252494
[8,] -0.3015504

[[6]]
            [,1]
[1,]  0.59528321
[2,] -1.37343346
[3,] -1.32761684
[4,]  0.08159036

[[7]]
           [,1]
[1,] -0.1167127
[2,] -1.2879482

attr(,"J")
[1] 7
attr(,"filter")
[1] "haar"
attr(,"class")
[1] "dwt"  "list"
> 
> 
> 
> cleanEx()
> nameEx("print.modwt")
> ### * print.modwt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.modwt
> ### Title: Print Maximum Overlap Discrete Wavelet Transform
> ### Aliases: print.modwt
> ### Keywords: internal
> 
> ### ** Examples
> 
> set.seed(999)
> x = rnorm(100)
> print(modwt(x))
[[1]]
               [,1]
  [1,] -0.515409736
  [2,]  1.053871806
  [3,] -0.262556744
  [4,] -0.273688458
  [5,] -0.144358658
  [6,] -0.656317260
  [7,]  0.305933557
  [8,]  0.149520730
  [9,] -0.076629839
 [10,]  1.223236537
 [11,] -0.595743161
 [12,]  0.402386027
 [13,] -0.383105672
 [14,]  0.392556173
 [15,] -1.160168346
 [16,]  0.715510689
 [17,]  0.016161257
 [18,]  0.400343553
 [19,] -1.487850930
 [20,]  0.422896901
 [21,]  0.935803811
 [22,] -0.501403616
 [23,]  0.326899250
 [24,] -0.709652037
 [25,]  0.883767069
 [26,] -0.874501615
 [27,]  0.110948594
 [28,] -0.334627376
 [29,]  0.713708078
 [30,]  1.254671572
 [31,] -0.890694027
 [32,] -0.210957417
 [33,]  0.450585109
 [34,] -0.663671795
 [35,] -0.933462442
 [36,]  0.871604760
 [37,]  0.446697632
 [38,] -0.002531128
 [39,] -0.960158205
 [40,]  0.458437074
 [41,]  0.247067432
 [42,] -0.645305713
 [43,]  0.085267223
 [44,]  0.706122126
 [45,] -0.012093283
 [46,] -1.163678252
 [47,]  1.032533935
 [48,]  0.284038133
 [49,] -0.308496432
 [50,] -0.040968880
 [51,] -0.264158970
 [52,]  1.194696844
 [53,] -0.689158563
 [54,] -0.216452200
 [55,]  0.174711196
 [56,]  0.142541354
 [57,] -0.923455536
 [58,]  0.857292353
 [59,] -0.500434895
 [60,] -0.178905187
 [61,]  1.044132679
 [62,] -0.061442660
 [63,]  0.030879841
 [64,] -0.561201663
 [65,] -0.564191353
 [66,] -0.130610926
 [67,]  0.562925396
 [68,] -0.067720643
 [69,]  0.707216766
 [70,] -0.551474647
 [71,]  0.018441813
 [72,]  0.509551627
 [73,] -0.683116954
 [74,]  0.695266607
 [75,] -0.455854488
 [76,]  0.238065311
 [77,] -1.301622653
 [78,]  1.250627453
 [79,] -0.298329171
 [80,] -0.241348021
 [81,]  0.814110642
 [82,] -1.106935941
 [83,]  0.656898999
 [84,] -0.644659251
 [85,]  0.413623037
 [86,]  0.870248169
 [87,] -0.808265666
 [88,]  0.629686365
 [89,] -0.284670417
 [90,]  0.610694640
 [91,] -0.815426606
 [92,] -0.503202394
 [93,]  1.131224359
 [94,] -1.206735376
 [95,]  1.088199669
 [96,] -0.812294964
 [97,]  0.142068949
 [98,]  0.026008935
 [99,]  0.230862128

[[2]]
              [,1]
 [1,]  0.664888566
 [2,]  0.127534930
 [3,] -0.477146159
 [4,] -0.609361517
 [5,] -0.575529810
 [6,]  0.052535292
 [7,]  0.264172589
 [8,]  0.609748795
 [9,]  0.887050037
[10,]  0.217068122
[11,] -0.087038389
[12,]  0.014365428
[13,] -0.379080836
[14,] -0.606134915
[15,]  0.143507145
[16,]  0.574088379
[17,] -0.335501283
[18,] -1.076230703
[19,]  0.146873342
[20,]  0.896550453
[21,]  0.129947914
[22,] -0.278628577
[23,] -0.104318877
[24,]  0.091690243
[25,] -0.377143783
[26,] -0.493615901
[27,]  0.077700960
[28,]  1.173730176
[29,]  1.166178597
[30,] -0.368836950
[31,] -0.431011876
[32,]  0.013270503
[33,] -0.905110462
[34,] -0.829495960
[35,]  0.628222354
[36,]  0.881234448
[37,] -0.259261415
[38,] -0.732205232
[39,]  0.101891687
[40,]  0.153633113
[41,] -0.479138385
[42,]  0.115675430
[43,]  0.742709096
[44,] -0.240871346
[45,] -0.653457926
[46,]  0.592713876
[47,]  0.646056885
[48,] -0.186961806
[49,] -0.327296582
[50,]  0.312705011
[51,]  0.718038077
[52,] -0.200036241
[53,] -0.473675884
[54,]  0.137755773
[55,] -0.231830816
[56,] -0.423538682
[57,]  0.145347137
[58,] -0.161241312
[59,]  0.092943705
[60,]  0.923958756
[61,]  0.476063599
[62,] -0.280442321
[63,] -0.827857419
[64,] -0.910097648
[65,] -0.131243904
[66,]  0.463759611
[67,]  0.567350437
[68,]  0.397619120
[69,] -0.188645358
[70,] -0.002519697
[71,]  0.177214056
[72,] -0.080707837
[73,]  0.125780886
[74,]  0.010811471
[75,] -0.640673259
[76,] -0.557276271
[77,]  0.450651541
[78,]  0.206310546
[79,]  0.016542715
[80,]  0.139968661
[81,] -0.371431121
[82,] -0.218898597
[83,] -0.109398233
[84,]  0.526417496
[85,]  0.672926854
[86,] -0.058298399
[87,]  0.083218324
[88,]  0.335520086
[89,]  0.060646128
[90,] -0.761680483
[91,] -0.345303517
[92,]  0.276255474
[93,] -0.097023362
[94,]  0.078684499
[95,] -0.197160655
[96,] -0.251074065
[97,]  0.212474474

[[3]]
              [,1]
 [1,] -0.432466781
 [2,] -0.519326406
 [3,] -0.682016595
 [4,]  0.052728931
 [5,]  0.419932702
 [6,]  0.744550501
 [7,]  0.975617137
 [8,]  0.529125233
 [9,]  0.166946211
[10,] -0.180167969
[11,] -0.350846459
[12,] -0.311908012
[13,] -0.213783915
[14,] -0.267094430
[15,] -0.190311040
[16,] -0.340911287
[17,]  0.044096657
[18,]  0.219120814
[19,]  0.151225146
[20,]  0.215491772
[21,] -0.227916812
[22,] -0.294431996
[23,] -0.390452742
[24,]  0.139094308
[25,]  0.472218367
[26,]  0.742503750
[27,]  0.989523139
[28,]  0.224663389
[29,] -0.300477809
[30,] -0.585895952
[31,] -0.806505223
[32,] -0.382243485
[33,]  0.046036416
[34,]  0.100383852
[35,]  0.105795606
[36,] -0.214771452
[37,] -0.267308212
[38,] -0.154631788
[39,] -0.056837993
[40,]  0.072056313
[41,]  0.176410940
[42,]  0.113323307
[43,]  0.040925064
[44,]  0.378797300
[45,]  0.155679631
[46,]  0.265747638
[47,]  0.354750899
[48,]  0.119205988
[49,]  0.317551845
[50,]  0.025194151
[51,] -0.230572253
[52,] -0.174031689
[53,] -0.395995189
[54,] -0.435281452
[55,]  0.075903582
[56,]  0.088968724
[57,]  0.403649074
[58,]  0.703116939
[59,]  0.108606742
[60,] -0.273511767
[61,] -0.655447572
[62,] -0.818439003
[63,] -0.261497396
[64,]  0.207520348
[65,]  0.407405806
[66,]  0.628239077
[67,]  0.183636889
[68,]  0.155935944
[69,]  0.145781820
[70,] -0.076561950
[71,] -0.105948716
[72,] -0.308180583
[73,] -0.352457046
[74,] -0.448715263
[75,]  0.138586269
[76,] -0.002343259
[77,]  0.056152925
[78,]  0.133674635
[79,] -0.417858880
[80,]  0.114294481
[81,]  0.041349634
[82,]  0.387818998
[83,]  0.659836900
[84,]  0.372670392
[85,]  0.450004815
[86,] -0.074469355
[87,] -0.070396468
[88,] -0.455792703
[89,] -0.363492134
[90,] -0.065242518
[91,] -0.368255448
[92,]  0.091275204
[93,] -0.139435099

[[4]]
               [,1]
 [1,]  0.2871724175
 [2,]  0.3948033139
 [3,]  0.4591856102
 [4,]  0.3995356922
 [5,]  0.2700206052
 [6,]  0.0585600666
 [7,]  0.0418065902
 [8,] -0.2178010389
 [9,] -0.1082624806
[10,] -0.2476180080
[11,] -0.2901216959
[12,] -0.3891194069
[13,] -0.1767537063
[14,] -0.0616423994
[15,] -0.1391567447
[16,]  0.1145832822
[17,]  0.0302407000
[18,]  0.1863802860
[19,]  0.1799214004
[20,]  0.3591718885
[21,]  0.2080210564
[22,]  0.3023397760
[23,]  0.3910441565
[24,]  0.1030888009
[25,] -0.0413504172
[26,] -0.1644521514
[27,] -0.2588458501
[28,] -0.3772975161
[29,] -0.2378565944
[30,] -0.2698800188
[31,] -0.3258760019
[32,] -0.3698650378
[33,] -0.1560845342
[34,] -0.0477782094
[35,]  0.0165223419
[36,]  0.1540692370
[37,]  0.1205966497
[38,]  0.1688812314
[39,]  0.1898815175
[40,]  0.4744284504
[41,]  0.4026610235
[42,]  0.3350063669
[43,]  0.2599273053
[44,]  0.2215887938
[45,]  0.1973940659
[46,] -0.0595727557
[47,] -0.0152450120
[48,] -0.0699443322
[49,] -0.0353947296
[50,] -0.0711259067
[51,]  0.0149208269
[52,] -0.1348030034
[53,] -0.1220723066
[54,]  0.0762567118
[55,]  0.0158098357
[56,] -0.1252672311
[57,] -0.2499201320
[58,] -0.1527609944
[59,] -0.1153755798
[60,]  0.1487324361
[61,]  0.1525729303
[62,]  0.1807386009
[63,] -0.0000861667
[64,]  0.1056058266
[65,]  0.1732562004
[66,]  0.0131999570
[67,]  0.0551628632
[68,] -0.2313842405
[69,] -0.2514896731
[70,] -0.4201589202
[71,] -0.1233175287
[72,] -0.0992863103
[73,] -0.0994007808
[74,]  0.1032265028
[75,] -0.0186472953
[76,]  0.2994580476
[77,]  0.2944285041
[78,]  0.4174216380
[79,]  0.4157092259
[80,]  0.2019212812
[81,]  0.2889335653
[82,]  0.0868188849
[83,]  0.0753942577
[84,] -0.2238199053
[85,] -0.2082072759

[[5]]
               [,1]
 [1,]  0.0504440781
 [2,]  0.0429737919
 [3,]  0.0294318094
 [4,] -0.0097656166
 [5,]  0.0622671245
 [6,]  0.1188075218
 [7,]  0.0772686286
 [8,]  0.0572271632
 [9,] -0.0445657489
[10,] -0.0196547938
[11,] -0.0945623726
[12,] -0.0240365731
[13,]  0.0007159061
[14,]  0.1365785669
[15,]  0.1585277832
[16,] -0.0245520769
[17,] -0.1042723343
[18,] -0.0951511131
[19,] -0.1606239790
[20,] -0.1206769534
[21,] -0.0735477413
[22,] -0.0342695151
[23,] -0.0354131649
[24,] -0.0811064122
[25,]  0.0245707690
[26,]  0.0374988984
[27,]  0.0170630695
[28,]  0.0762148758
[29,]  0.1003653854
[30,]  0.0041548441
[31,]  0.0193210105
[32,]  0.2545237654
[33,]  0.3069213917
[34,]  0.2755543088
[35,]  0.2756488897
[36,]  0.2312219106
[37,]  0.1966562374
[38,]  0.0629962159
[39,]  0.0876006646
[40,]  0.1046362774
[41,]  0.0409757162
[42,]  0.0199967795
[43,]  0.0871966897
[44,]  0.0503576116
[45,]  0.0529111914
[46,]  0.1368396344
[47,]  0.0081442464
[48,] -0.1074364839
[49,] -0.1809893966
[50,] -0.1817239693
[51,] -0.0803337347
[52,] -0.0343611858
[53,] -0.0342080596
[54,]  0.0087874966
[55,] -0.0538400132
[56,] -0.0066709441
[57,] -0.0014042560
[58,] -0.0115672888
[59,] -0.0118485743
[60,] -0.0072889987
[61,] -0.0279889559
[62,] -0.1210788008
[63,]  0.0844940008
[64,]  0.0544772436
[65,]  0.1316941020
[66,]  0.1532359238
[67,]  0.0466312651
[68,]  0.0718559747
[69,]  0.0645800296

[[6]]
               [,1]
 [1,]  0.0744104006
 [2,]  0.0641129373
 [3,] -0.0080836294
 [4,] -0.0099488064
 [5,]  0.0559139396
 [6,]  0.0566323538
 [7,]  0.0470214817
 [8,] -0.0001746918
 [9,]  0.0227757527
[10,]  0.0376698912
[11,]  0.0133802280
[12,]  0.0893753951
[13,]  0.1271789342
[14,]  0.1408639448
[15,]  0.1026570253
[16,]  0.1885294850
[17,]  0.1642905263
[18,]  0.1371167676
[19,]  0.1551700329
[20,]  0.1537028410
[21,]  0.1427783369
[22,]  0.0502552067
[23,]  0.0429740756
[24,]  0.0607475993
[25,]  0.0525589727
[26,]  0.0329625843
[27,]  0.0898039372
[28,]  0.0848205502
[29,]  0.0890994062
[30,]  0.0783776560
[31,]  0.0600517521
[32,]  0.0470640205
[33,]  0.0383183503
[34,]  0.0326711470
[35,]  0.0808063427
[36,]  0.1171777568
[37,]  0.0964100739

attr(,"J")
[1] 6
attr(,"filter")
[1] "haar"
attr(,"class")
[1] "modwt" "list" 
> 
> 
> 
> cleanEx()
> nameEx("print.wvar")
> ### * print.wvar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.wvar
> ### Title: Print Wavelet Variances
> ### Aliases: print.wvar
> ### Keywords: internal
> 
> ### ** Examples
> 
> set.seed(999)
> x = rnorm(100)
> out = wvar(x)
> print( out )
     Variance      Low CI   High CI
2  0.45217782 0.316045047 0.7004281
4  0.23033971 0.140751059 0.4440086
8  0.13710252 0.069880858 0.3811887
16 0.05160384 0.020543745 0.2878292
32 0.01172383 0.003282007 0.3685303
> 
> 
> 
> cleanEx()
> nameEx("robust_eda")
> ### * robust_eda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: robust_eda
> ### Title: Comparison between classical and robust Wavelet Variances
> ### Aliases: robust_eda
> 
> ### ** Examples
> 
> set.seed(999)
> n = 10^4
> Xt = rnorm(n)
> wv = wvar(Xt)
> 
> plot(wv)
> plot(wv, main = "Simulated white noise", xlab = "Scales")
> plot(wv, units = "sec", legend_position = "topright")
> plot(wv, col_wv = "darkred", col_ci = "pink")
> 
> 
> 
> cleanEx()
> nameEx("summary.dwt")
> ### * summary.dwt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.dwt
> ### Title: Summary Discrete Wavelet Transform
> ### Aliases: summary.dwt
> ### Keywords: internal
> 
> ### ** Examples
> 
> set.seed(999)
> x = rnorm(2^8)
> summary(dwt(x))

Results of DWT using haar filter with 7 levels:
Displaying only the first 6 coefficients...
Level 1 Wavelet Coefficients
 -0.7288994 -0.3713113 -0.204154 0.4326554 -0.108371 -0.8425081 ...
Level 2 Wavelet Coefficients
 1.329777 -1.15106 1.7741 -0.7581617 -0.6710026 0.2598958 ...
Level 3 Wavelet Coefficients
 -1.223201 0.4721952 0.1247242 1.335635 0.1302106 0.4989655 ...
Level 4 Wavelet Coefficients
 1.14869 0.1209628 -0.6243381 -0.1415789 0.6930248 1.155734 ...
Level 5 Wavelet Coefficients
 0.2853548 1.73621 0.7449743 0.4771237 1.236138 -0.2320687 ...
Level 6 Wavelet Coefficients
 0.5952832 -1.373433 -1.327617 0.08159036 ...
Level 7 Wavelet Coefficients
 -0.1167127 -1.287948 ...
> 
> 
> 
> cleanEx()
> nameEx("summary.modwt")
> ### * summary.modwt
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.modwt
> ### Title: Summary Maximum Overlap Discrete Wavelet Transform
> ### Aliases: summary.modwt
> ### Keywords: internal
> 
> ### ** Examples
> 
> set.seed(999)
> x = rnorm(100)
> summary(modwt(x))

Results of MODWT using haar filter with 6 levels:
Displaying only the first 6 coefficients...
Level 1 Wavelet Coefficients
 -0.5154097 1.053872 -0.2625567 -0.2736885 -0.1443587 -0.6563173 ...
Level 2 Wavelet Coefficients
 0.6648886 0.1275349 -0.4771462 -0.6093615 -0.5755298 0.05253529 ...
Level 3 Wavelet Coefficients
 -0.4324668 -0.5193264 -0.6820166 0.05272893 0.4199327 0.7445505 ...
Level 4 Wavelet Coefficients
 0.2871724 0.3948033 0.4591856 0.3995357 0.2700206 0.05856007 ...
Level 5 Wavelet Coefficients
 0.05044408 0.04297379 0.02943181 -0.009765617 0.06226712 0.1188075 ...
Level 6 Wavelet Coefficients
 0.0744104 0.06411294 -0.008083629 -0.009948806 0.05591394 0.05663235 ...
> 
> 
> 
> cleanEx()
> nameEx("summary.wvar")
> ### * summary.wvar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.wvar
> ### Title: Summary of Wavelet Variances
> ### Aliases: summary.wvar
> ### Keywords: internal
> 
> ### ** Examples
> 
> set.seed(999)
> x = rnorm(100)
> ret = wvar(x)
> summary(ret)
Results of the wavelet variance calculation using the classical method.
The confidence interval was generated using (1-0.05)*100 
     Variance      Low CI   High CI
2  0.45217782 0.316045047 0.7004281
4  0.23033971 0.140751059 0.4440086
8  0.13710252 0.069880858 0.3811887
16 0.05160384 0.020543745 0.2878292
32 0.01172383 0.003282007 0.3685303
> 
> 
> 
> cleanEx()
> nameEx("unitConversion")
> ### * unitConversion
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: unitConversion
> ### Title: Convert Unit of Time Series Data
> ### Aliases: unitConversion
> ### Keywords: internal
> 
> ### ** Examples
> 
> x = seq(60, 3600, 60)
> unitConversion(x, 'sec', 'min')
$x
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
[51] 51 52 53 54 55 56 57 58 59 60

$converted
[1] TRUE

> y = 1:10
> unitConversion(y, 'hour', 'sec')
$x
 [1]  3600  7200 10800 14400 18000 21600 25200 28800 32400 36000

$converted
[1] TRUE

> 
> 
> 
> cleanEx()
> nameEx("wccv_get_y")
> ### * wccv_get_y
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wccv_get_y
> ### Title: Mapping to log10 scale
> ### Aliases: wccv_get_y
> 
> ### ** Examples
> 
> x = 2^(-1:-9)
> y.min = floor(min(log10(abs(x))))
> y.step = 2
> wccv_get_y(x, y.min, y.step)
[1] 2.349485 2.198970 2.048455 1.897940 1.747425 1.596910 1.446395 1.295880
[9] 1.145365
> 
> 
> 
> cleanEx()
> nameEx("wvar")
> ### * wvar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wvar
> ### Title: Wavelet Variance
> ### Aliases: wvar wvar.lts wvar.gts wvar.ts wvar.imu wvar.default
> 
> ### ** Examples
> 
> set.seed(999)
> x = rnorm(100)
> 
> # Default
> wvar(x)
     Variance      Low CI   High CI
2  0.45217782 0.316045047 0.7004281
4  0.23033971 0.140751059 0.4440086
8  0.13710252 0.069880858 0.3811887
16 0.05160384 0.020543745 0.2878292
32 0.01172383 0.003282007 0.3685303
> 
> # Robust
> wvar(x, robust = TRUE, eff=0.3)
      Variance      Low CI   High CI
2  0.549798561 0.247597207 1.1008897
4  0.239947099 0.069559083 0.6463224
8  0.131799969 0.013817225 0.5602029
16 0.061956778 0.013817225 0.5797696
32 0.007484438 0.003742219 0.4233586
> 
> # Classical
> wvar(x, robust = FALSE, eff=0.3)
     Variance      Low CI   High CI
2  0.45217782 0.316045047 0.7004281
4  0.23033971 0.140751059 0.4440086
8  0.13710252 0.069880858 0.3811887
16 0.05160384 0.020543745 0.2878292
32 0.01172383 0.003282007 0.3685303
> 
> # 90% Confidence Interval 
> wvar(x, alpha = 0.10)
     Variance      Low CI   High CI
2  0.45217782 0.334461347 0.6516656
4  0.23033971 0.152096918 0.3978812
8  0.13710252 0.077666345 0.3200430
16 0.05160384 0.023732362 0.2119612
32 0.01172383 0.004018555 0.1908247
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.72 0.04 0.759 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
